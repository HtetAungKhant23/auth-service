generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  phone      String?
  email      String      @unique
  password   String?
  profile    UserProfile @relation(fields: [profile_id], references: [id])
  profile_id String      @unique
  role       Role        @relation(fields: [role_id], references: [id])
  role_id    String
  is_deleted Boolean     @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  @@map("users")
}

model UserProfile {
  id         String  @id @default(uuid())
  user_name  String
  file_id    String?
  file       File?   @relation(references: [id], fields: [file_id], onDelete: SetNull)
  is_deleted Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  User     User?
  location Location[]

  @@map("user_profiles")
}

model Role {
  id         String  @unique @default(uuid())
  name       String
  is_deleted Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  Permission Permission[]
  User       User[]

  @@map("roles")
}

model Permission {
  id         String  @unique @default(uuid())
  role       Role    @relation(fields: [role_id], references: [id])
  role_id    String
  action     String
  subject    String
  inverted   Boolean @default(false)
  conditions Json?   @db.JsonB()
  reason     String?
  is_deleted Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  @@map("permissions")
}

model Location {
  id              String      @id @default(uuid())
  address         String
  township        String
  city            String
  user_profile    UserProfile @relation(fields: [user_profile_id], references: [id])
  user_profile_id String
  is_deleted      Boolean     @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  @@map("locations")
}

model Otp {
  id     String     @id @default(uuid())
  phone  String     @unique
  code   String
  status OTP_STATUS @default(UNUSED)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  @@map("otps")
}

model File {
  id         String  @id @default(uuid())
  file_name  String
  path       String
  slug       String
  is_deleted Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  user_profile UserProfile[]

  @@map("files")
}

enum User_Role {
  SuperAdmin
  Admin
  Staff
  User
}

enum OTP_STATUS {
  UNUSED
  USED
}
